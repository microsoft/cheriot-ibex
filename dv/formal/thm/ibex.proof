# Copyright lowRISC contributors.
# Copyright 2024 University of Oxford, see also CREDITS.md.
# Licensed under the Apache License, Version 2.0 (see LICENSE for details).
# Original Author: Louis-Emile Ploix
# SPDX-License-Identifier: Apache-2.0

lemma ibex
  NotDataIndTiming: have (~`CSR.data_ind_timing_o)

  PrivMorUMpp: have ((`CSR.mstatus_q.mpp == PRIV_LVL_U) || (`CSR.mstatus_q.mpp == PRIV_LVL_M))
  PrivMorUCur: have ((`CSR.priv_lvl_q == PRIV_LVL_U) || (`CSR.priv_lvl_q == PRIV_LVL_M))
  NoFinishingIRQ: have (wbexc_finishing |-> ~wbexc_handling_irq)

  PCBit0: have (~`CR.pc_id[0])
  MEPCCBit0: have (~`CSR.mepc_q[0])
  MtvecBit1: have (~pre_mtvec.address[1])
  EBreakIntoDebug: have (~`IDC.ebreak_into_debug)
  NoEnterDebugMode: have (~`IDC.enter_debug_mode)
  IfBusErr: have (`IF.if_id_pipe_reg_we |-> ~`IF.if_instr_bus_err)

  MemGnt: have (mem_gnt_snd_q |-> mem_gnt_fst_q)
  
  block
    MTCCNotSealed: have (`CSR.mtvec_cap.valid -> `CSR.mtvec_cap.otype == 3'b0)
    MTCCPermitExecute: have (`CSR.mtvec_cap.valid -> `CSR.mtvec_cap.cperms[4:3] == 2'b01)
    /
    PCCNotSealed: have (`CSR.pcc_cap_o.valid -> `CSR.pcc_cap_o.otype == 3'b0)
    PCCPermitExecute: have (`CSR.pcc_cap_o.valid -> `CSR.pcc_cap_o.perms[PERM_EX])

  WfiKill: have (wbexc_exists & wbexc_is_wfi |-> ex_kill)
  ErrKill: have (wbexc_exists & wbexc_err |-> ex_kill)
  
  ReqRequiresInstr: have (data_req_o |-> idex_has_compressed_instr)
  ReqRequiresNotIllegal: have (data_req_o |->  ~`CR.illegal_insn_id & ~`CR.illegal_c_insn_id)

  AluInstrMatch: have (`CR.instr_rdata_id == `CR.instr_rdata_alu_id)

  IdExNotReq: have (~ex_is_mem_instr -> ~data_req_o)
  IdExNotMemMuteIncr: have (`CR.instr_valid_id & ~ex_is_mem_instr -> ~`ID.lsu_addr_incr_req_i & ~`ID.lsu_req_done_i)
  ExecNoSpecialReq: have (`ID.instr_executing & ~instr_will_progress |-> ~`IDC.special_req)
  StallIdFSM1: have (`ID.instr_executing && `ID.id_fsm_d != 0 |-> ~instr_will_progress)

  ClockEn: have (instr_will_progress |-> ibex_top_i.clock_en)
  EnWbProgress: have (`WB.en_wb_i |-> instr_will_progress)
  ErrFast: have (wbexc_exists & wbexc_err |-> $past(instr_will_progress) | $past(instr_will_progress, 2))
  DoneFin: have (`WBG.wb_done & `WBG.wb_valid_q & ~wbexc_err |-> wbexc_finishing)
  ValidExists: have (`WBG.wb_valid_q |-> wbexc_exists)

  WbexcErrMonotonic: have (wbexc_exists & wbexc_err & ~instr_will_progress & ~wbexc_finishing |=> wbexc_err)

  NonCompressedMatch: have (wbexc_finishing && wbexc_instr[1:0] == 2'b11 |-> wbexc_instr == wbexc_decompressed_instr)
  CompressedMatch: have (idex_has_compressed_instr |-> idex_compressed_instr[15:0] == `CR.instr_rdata_c_id)

  PostFlushNoInstr: have (`IDC.ctrl_fsm_cs == `IDC.FLUSH |=> ~`CR.instr_valid_id)

  DecompressionIllegalIdEx: have (idex_has_compressed_instr |-> decompressed_instr_illegal == `CR.illegal_c_insn_id)
  DecompressionMatchIdEx: have (idex_has_compressed_instr & ~`CR.illegal_insn_id & ~`CR.illegal_c_insn_id |-> decompressed_instr == `CR.instr_rdata_id)
  DecompressionIllegalWbexc: have (wbexc_exists |-> decompressed_instr_illegal_2 == wbexc_compressed_illegal)
  DecompressionMatchWbexc: have (wbexc_exists & ~wbexc_illegal & ~wbexc_compressed_illegal |-> decompressed_instr_2 == wbexc_decompressed_instr)
  
  HasCompressed: have (`CR.instr_valid_id |-> idex_has_compressed_instr)
  LSUInstrStable: have (`LSU.ls_fsm_cs != 0 |-> $stable(`CR.instr_rdata_id))

  NoneIdleIsDecode: have (`LSU.ls_fsm_cs != 0 |-> `IDC.ctrl_fsm_cs == 5)
  LSUFinishWaitRvalidMisGntsDone: have (`LSU.ls_fsm_cs == 4 && data_rvalid_i |-> instr_will_progress)
  LSUFinishWaitRvalidMis: have (`LSU.ls_fsm_cs == 2 && data_rvalid_i && data_gnt_i |-> instr_will_progress)
  LSUFinishWaitGnt: have (`LSU.ls_fsm_cs == 3 && data_gnt_i |-> instr_will_progress)
  LSUFinishFast: have (`LSU.ls_fsm_cs == 0 && data_gnt_i && `LSU.ls_fsm_ns == 0 |-> instr_will_progress)
  
  WBOutstandingNoReq: have (outstanding_mem & ~`LSU.lsu_resp_valid_o |-> ~data_req_o)

  NotIdleReqDec: have (`LSU.ls_fsm_cs != `LSU.IDLE |-> `ID.lsu_req_dec | `CE.is_cap)
  NotIdleNoExErr: have (`LSU.ls_fsm_cs != `LSU.IDLE |-> ~ex_err)

  ProgressNoWbStall: have (instr_will_progress |-> ~`IDC.stall_wb_i)
  
  NoStoreWb: have (`WBG.wb_instr_type_q == WB_INSTR_STORE |-> ~`WB.rf_we_wb_o)
  WbInstrDefined: have (`WBG.wb_instr_type_q != 2'b11)

  SpecPastReg: have (wbexc_exists & wbexc_post_wX_en |-> spec_past_regs[wbexc_post_wX_addr] == wbexc_post_wX)

  SpecPastWbexc:
  each X Priv:(priv) Mstatus:(mstatus) Mie:(mie) Mcause:(mcause) Mtval:(mtval) \
      Mscratch:(mscratch) Mcounteren:(mcounteren) Pc:(pc) \
      Mtvec:(mtvec) Mepc:(mepc) MscratchC:(mscratchc) Pcc:(pcc) Mtdc:(mtdc) 
    have (wbexc_exists |-> spec_past_``X == wbexc_post_``X)

  RfWriteWb: have (`CR.rf_write_wb & wbexc_finishing |-> `WB.rf_we_wb_o)

  CtrlWbexc: have (wbexc_exists |-> `IDC.ctrl_fsm_cs == `IDC.DECODE || `IDC.ctrl_fsm_cs == `IDC.FLUSH)
  ProgressDecode: have (instr_will_progress |-> `IDC.ctrl_fsm_cs == `IDC.DECODE)

  BranchedProg: have (ex_has_branched_d & ~instr_will_progress |=> ex_has_branched_d)

  IDCFsmAny: have (`IDC.ctrl_fsm_cs inside {`IDC.RESET, `IDC.BOOT_SET, `IDC.WAIT_SLEEP, `IDC.SLEEP, `IDC.FIRST_FETCH, `IDC.DECODE, `IDC.IRQ_TAKEN, `IDC.FLUSH})
  IDCFsmNotBoot: have (##3 ~(`IDC.ctrl_fsm_cs inside {`IDC.RESET, `IDC.BOOT_SET}))

  MemInstrEx: have (`LSU.ls_fsm_cs != `LSU.IDLE |-> ex_is_mem_instr)
  MemInstrWbLoad: have (`WB.outstanding_load_wb_o |-> wbexc_is_load_instr)
  MemInstrWbStore: have (`WB.outstanding_store_wb_o |-> wbexc_is_store_instr)
  MemClockEn: have (`LSU.ls_fsm_cs != `LSU.IDLE |-> ibex_top_i.core_busy_q)

  MemInstrWbWrite: have (
    wbexc_exists & wbexc_is_store_instr & ~wbexc_err |->
    ~`WBG.rf_we_wb_q & ~`WBG.cheri_rf_we_q & ~`WBG.wb_cheri_load_q & (`WBG.wb_instr_type_q != WB_INSTR_LOAD)
  )
  
  LsuCheriErrEx: have (`LSU.ls_fsm_cs != `LSU.IDLE |-> ~`LSU.cheri_err_q)

  TRVKOpValid: have (
    ((`TRVK.cpu_op_valid_q[0] & (|`TRVK.trsv_addr_q[0])) -> ~`RF.reg_rdy_vec[`TRVK.trsv_addr_q[0]]) &
    ((`TRVK.cpu_op_valid_q[1] & (|`TRVK.trsv_addr_q[1])) -> ~`RF.reg_rdy_vec[`TRVK.trsv_addr_q[1]]) &
    ((`TRVK.cpu_op_valid_q[2] & (|`TRVK.trsv_addr_q[2])) -> ~`RF.reg_rdy_vec[`TRVK.trsv_addr_q[2]])
  )
  TRVKOutstandingCLC: have (
    `TRVK.cpu_op_active && (|`WBG.rf_waddr_wb_q) |-> ~`RF.reg_rdy_vec[`WBG.rf_waddr_wb_q]
  )
  TRVKSecondOutstanding: have (
    `WB.outstanding_load_wb_o |->
    ((`TRVK.cpu_op_valid_q[0] & (|`TRVK.trsv_addr_q[0])) -> (~`WBG.rf_waddr_wb_q != (|`TRVK.trsv_addr_q[0]))) &
    ((`TRVK.cpu_op_valid_q[1] & (|`TRVK.trsv_addr_q[1])) -> (~`WBG.rf_waddr_wb_q != (|`TRVK.trsv_addr_q[1]))) &
    ((`TRVK.cpu_op_valid_q[2] & (|`TRVK.trsv_addr_q[2])) -> (~`WBG.rf_waddr_wb_q != (|`TRVK.trsv_addr_q[2])))
  )
  CPUOpActiveNoErr: have (wbexc_exists & ~wbexc_err |-> `IS_LOADCAPIMM == `TRVK.cpu_op_active)
  CPUOpActiveErr: have (wbexc_exists & wbexc_err & `TRVK.cpu_op_active |-> `IS_LOADCAPIMM ##1 ~`TRVK.cpu_op_active)
  TRSVAddr: have (wbexc_exists & ~wbexc_err & `IS_LOADCAPIMM |-> `TRVK.trsv_addr == `WB.rf_waddr_wb_o)
  TRSVAddrLow: have (`TRVK.cpu_op_active |-> ~`TRVK.trsv_addr[4])

  LsuWeq: block
    Ex: have (`LSU.ls_fsm_cs != `LSU.IDLE && mem_gnt_fst_q |-> ex_is_store_instr == `LSU.data_we_q)
    /
    Wb: have (outstanding_mem |-> wbexc_is_store_instr == `LSU.data_we_q)

  block
    LSUEmpty: have (`LSU.ls_fsm_cs != `LSU.IDLE |-> ~wbexc_exists & ~ex_kill)
    LSUValidInstr: have (`LSU.ls_fsm_cs != `LSU.IDLE |-> ~`ID.instr_fetch_err_i & `ID.instr_valid_i & ~`ID.illegal_insn_o)
    /
    LSUEnd: have (`LSU.lsu_req_done_o |-> instr_will_progress)
    LSUNotTRSV: have (`LSU.ls_fsm_cs != `LSU.IDLE |-> ~`ID.stall_cheri_trvk)

  NoTBRE: have (~`CE.lsu_tbre_sel_i & ~`LSU.req_is_tbre_q & ~`LSU.tbre_req_good & ~`CR.tbre_lsu_req)

  /

  Memory: graph_induction +rev
    inv idle (
      ~`LSU.handle_misaligned_q &&
      `CR.lsu_resp_valid == outstanding_mem &&
      (`LSU.cap_rx_fsm_q == CRX_IDLE || (`LSU.cap_rx_fsm_q == CRX_WAIT_RESP2 && data_rvalid_i))
    )
    inv idle_active (
      data_mem_assume.outstanding_reqs == data_gnt_i &&
      ~`LSU.handle_misaligned_q &&
      `CR.lsu_resp_valid == outstanding_mem &&
      (`LSU.cap_rx_fsm_q == CRX_IDLE || (`LSU.cap_rx_fsm_q == CRX_WAIT_RESP2 && data_rvalid_i))
    )
    inv wait_gnt_mis (
      $stable(data_addr_o) && ~has_resp_waiting_q && ~`LSU.lsu_cheri_err_i &&
      `LSU.cap_rx_fsm_q == CRX_IDLE && ~ex_is_mem_cap_instr
    )
    inv wait_gnt (
      $stable(data_addr_o) && ~has_resp_waiting_q && ~`LSU.lsu_cheri_err_i &&
      `LSU.cap_rx_fsm_q == CRX_IDLE && ~ex_is_mem_cap_instr
    )
    inv wait_rvalid_mis (
      ($stable(`LSU.ls_fsm_cs) -> $stable(data_addr_o)) &&
      has_one_resp_waiting_q && ~`LSU.lsu_cheri_err_i &&
      `LSU.cap_rx_fsm_q == CRX_IDLE && ~ex_is_mem_cap_instr
    )
    inv wait_rvalid_mis_gnts_done (
      $stable(data_addr_o) &&
      has_two_resp_waiting_q && ~`LSU.lsu_cheri_err_i &&
      `LSU.cap_rx_fsm_q == CRX_IDLE && ~ex_is_mem_cap_instr &&
      ~`LSU.handle_misaligned_q
    )
    inv wait_gnt1 (
      $stable(data_addr_o) && ~has_resp_waiting_q && ~`LSU.lsu_cheri_err_i && `LSU.cap_rx_fsm_q == CRX_WAIT_RESP1 && ex_is_mem_cap_instr &&
      ~`LSU.handle_misaligned_q
    )
    inv wait_gnt2 (
      ($stable(`LSU.ls_fsm_cs) -> $stable(data_addr_o)) &&
      has_one_resp_waiting_q && ~`LSU.lsu_cheri_err_i && `LSU.cap_rx_fsm_q == CRX_WAIT_RESP1 && ex_is_mem_cap_instr &&
      ~`LSU.handle_misaligned_q
    )
    inv wait_gnt2_direct (
      ($stable(`LSU.ls_fsm_cs) -> $stable(data_addr_o)) &&
      ~has_resp_waiting_q && ~`LSU.lsu_cheri_err_i && `LSU.cap_rx_fsm_q == CRX_WAIT_RESP2 && ex_is_mem_cap_instr &&
      ~`LSU.handle_misaligned_q
    )
    inv wait_resp (
      $stable(data_addr_o) && has_two_resp_waiting_q && ~`LSU.lsu_cheri_err_i && `LSU.cap_rx_fsm_q == CRX_WAIT_RESP1 && ex_is_mem_cap_instr &&
      ~`LSU.handle_misaligned_q
    )

    inv step (
      `LSU.ls_fsm_ns == `LSU.IDLE &&
      (`CR.instr_type_wb != WB_INSTR_OTHER || `CR.cheri_load_id || `CR.cheri_store_id) &&
      has_one_resp_waiting_d &&
      (ex_is_mem_cap_instr -> (`LSU.cap_rx_fsm_d == CRX_WAIT_RESP2)) &&
      (~ex_is_mem_cap_instr -> (`LSU.cap_rx_fsm_d == CRX_IDLE)) &&
      ~`LSU.handle_misaligned_d
    )
    inv wait (
      outstanding_mem && has_one_resp_waiting_q && ~`LSU.lsu_req_i && wbexc_exists &&
      (wbexc_is_mem_cap_instr -> (`LSU.cap_rx_fsm_q == CRX_WAIT_RESP2)) &&
      (~wbexc_is_mem_cap_instr -> (`LSU.cap_rx_fsm_q == CRX_IDLE)) &&
      ~`LSU.handle_misaligned_q && ~`LSU.cheri_err_q
    )
    inv end (
      outstanding_mem && has_one_resp_waiting_q && wbexc_exists &&
      (wbexc_is_mem_cap_instr -> (`LSU.cap_rx_fsm_q == CRX_WAIT_RESP2)) &&
      (~wbexc_is_mem_cap_instr -> (`LSU.cap_rx_fsm_q == CRX_IDLE)) &&
      ~`LSU.handle_misaligned_q && ~`LSU.cheri_err_q
    )

    entry ($rose(rst_ni)) -> idle

    node idle idle (`LSU.ls_fsm_cs == `LSU.IDLE && data_mem_assume.outstanding_reqs == data_gnt_i)
    edge idle => idle
    edge idle -> idle_active
    
    node idle_active idle_active (`LSU.ls_fsm_cs == `LSU.IDLE && `CR.lsu_req && ~`CR.lsu_cheri_err)
    edge idle_active => wait_rvalid_mis wait_gnt_mis wait_gnt wait_gnt1 wait_gnt2
    edge idle_active -> step
    
    node wait_gnt_mis wait_gnt_mis (`LSU.ls_fsm_cs == `LSU.WAIT_GNT_MIS)
    edge wait_gnt_mis => wait_gnt_mis wait_rvalid_mis
    
    node wait_rvalid_mis wait_rvalid_mis (`LSU.ls_fsm_cs == `LSU.WAIT_RVALID_MIS)
    edge wait_rvalid_mis => wait_rvalid_mis wait_rvalid_mis_gnts_done wait_gnt
    edge wait_rvalid_mis -> step
    
    node wait_gnt wait_gnt (`LSU.ls_fsm_cs == `LSU.WAIT_GNT)
    edge wait_gnt => wait_gnt
    edge wait_gnt -> step
    
    node wait_rvalid_mis_gnts_done wait_rvalid_mis_gnts_done (`LSU.ls_fsm_cs == `LSU.WAIT_RVALID_MIS_GNTS_DONE)
    edge wait_rvalid_mis_gnts_done => wait_rvalid_mis_gnts_done
    edge wait_rvalid_mis_gnts_done -> step

    node wait_gnt1 wait_gnt1 (`LSU.ls_fsm_cs == `LSU.CTX_WAIT_GNT1)
    edge wait_gnt1 => wait_gnt1 wait_gnt2
    edge wait_gnt1 -> step

    node wait_gnt2 wait_gnt2 (`LSU.ls_fsm_cs == `LSU.CTX_WAIT_GNT2 && has_one_resp_waiting_q)
    edge wait_gnt2 => wait_gnt2 wait_gnt2_direct wait_resp
    edge wait_gnt2 -> step

    node wait_gnt2_direct wait_gnt2_direct (`LSU.ls_fsm_cs == `LSU.CTX_WAIT_GNT2 && ~has_resp_waiting_q)
    edge wait_gnt2_direct => wait_gnt2_direct
    edge wait_gnt2_direct -> step

    node wait_resp wait_resp (`LSU.ls_fsm_cs == `LSU.CTX_WAIT_RESP)
    edge wait_resp => wait_resp
    edge wait_resp -> step

    node step step (`LSU.lsu_req_done_o & ~`LSU.lsu_cheri_err_i)
    edge step => wait end
    
    node wait wait (has_resp_waiting_q && ~`CR.lsu_resp_valid && `LSU.ls_fsm_cs == `LSU.IDLE && ~instr_will_progress)
    edge wait => wait end

    node end end (`CR.lsu_resp_valid && `LSU.ls_fsm_cs == `LSU.IDLE && data_rvalid_i)
    edge end -> idle
  /
  NoMemAccessNoRValid: have (`LSU.lsu_resp_valid_o -> outstanding_mem)
  StallNoChangeA: have (`LSU.ls_fsm_cs != `LSU.IDLE && ($past(`LSU.ls_fsm_cs) != `LSU.IDLE || $past(`LSU.lsu_req_i)) |-> $stable(`ID.rf_rdata_a_fwd) & $stable(`CE.rf_rcap_a))
  StallNoChangeB: have (data_we_o && `LSU.ls_fsm_cs != `LSU.IDLE && ($past(`LSU.ls_fsm_cs) != `LSU.IDLE || $past(`LSU.lsu_req_i)) |-> $stable(`ID.rf_rdata_b_fwd) & $stable(`CE.rf_rcap_a))

  BecameDecodeIsInstrStart: have (`IDC.ctrl_fsm_cs == `IDC.DECODE && !$stable(`IDC.ctrl_fsm_cs) |-> ~`ID.instr_valid_i | `CR.instr_new_id)
  BecameDecodeIsEmptyWbexc: have (`IDC.ctrl_fsm_cs == `IDC.DECODE && !$stable(`IDC.ctrl_fsm_cs) |-> ~wbexc_exists)
  FetchErrIsErr: have (wbexc_fetch_err & wbexc_exists |-> wbexc_err & `IDC.instr_fetch_err)

  MemOpRequiresValid: have (`LSU.ls_fsm_cs != `LSU.IDLE || `CR.lsu_req |-> `ID.instr_valid_i)

  MultEndState: have (instr_will_progress |=> `MULTG.mult_state_q == `MULTG.ALBL)

  DataWeOutstanding: have (outstanding_mem |-> `ID.outstanding_store_wb_i == `LSU.data_we_q)
  TRVKMutex: have ((`RF.we_a_i & `RF.trvk_en_i & (|`RF.we_a_dec)) -> (`RF.trvk_dec != `RF.we_a_dec))
  DTI: lemma dti

  /
  
  MemErrKind: have (finishing_executed && wbexc_is_mem_instr && ~wbexc_illegal && wbexc_err |-> `IDC.store_err_q | `IDC.load_err_q)
  MemErrStructure: have (finishing_executed && wbexc_is_mem_instr && ~wbexc_illegal && wbexc_err |-> $past(instr_will_progress, 2) | $past(data_rvalid_i))
  MemNoErrStructure: have (finishing_executed && wbexc_is_mem_instr && ~wbexc_illegal && ~wbexc_err |-> data_rvalid_i)
  
  WbexcMemErrKindLoad: have (`IDC.load_err_q |-> wbexc_exists & wbexc_is_load_instr)
  WbexcMemErrKindStore: have (`IDC.store_err_q |-> wbexc_exists & wbexc_is_store_instr)

  WbexcNotMemMuteLSU: have (~wbexc_is_mem_instr -> ~`CR.rf_we_lsu & ~`CR.lsu_resp_valid & ~`CR.lsu_load_err & ~`CR.lsu_store_err)
  WbexcNotMemMuteMemErr: have (~wbexc_is_mem_instr -> ~`IDC.load_err_q & ~`IDC.store_err_q)
  StallIdFSM2: have (`ID.instr_executing && ~instr_will_progress |=> `ID.instr_executing)
  NewIdFSM: have (`CR.instr_new_id |-> `ID.id_fsm_q == 0)
  PreNextPcMatch: have (instr_will_progress & ~ex_has_branched_d & ~`IDC.instr_fetch_err -> pre_nextpc == `CR.pc_if)
  StallNoChangeLsuWData: have ((data_we_o && `LSU.ls_fsm_cs != `LSU.IDLE && ($past(`LSU.ls_fsm_cs) != `LSU.IDLE || $past(`LSU.lsu_req_i)) |-> $stable(`LSU.lsu_wdata_i)))

  # These properties take some time to prove, but do prove with low proof effort
  SpecStableLoad: have (ex_is_load_instr && `LSU.ls_fsm_cs != `LSU.IDLE && ($past(`LSU.ls_fsm_cs) != `LSU.IDLE || $past(`LSU.lsu_req_i)) |-> $stable(spec_mem_read))
  SpecStableLoadSnd: have (ex_is_load_instr && `LSU.ls_fsm_cs != `LSU.IDLE && ($past(`LSU.ls_fsm_cs) != `LSU.IDLE || $past(`LSU.lsu_req_i)) |-> $stable(spec_mem_read_snd))
  SpecStableLoadAddr: have (ex_is_load_instr && `LSU.ls_fsm_cs != `LSU.IDLE && ($past(`LSU.ls_fsm_cs) != `LSU.IDLE || $past(`LSU.lsu_req_i)) |-> $stable(spec_mem_read_fst_addr))
  SpecStableLoadSndAddr: have (ex_is_load_instr && `LSU.ls_fsm_cs != `LSU.IDLE && ($past(`LSU.ls_fsm_cs) != `LSU.IDLE || $past(`LSU.lsu_req_i)) |-> $stable(spec_mem_read_snd_addr))

  SpecStableStore: have (ex_is_store_instr && `LSU.ls_fsm_cs != `LSU.IDLE && ($past(`LSU.ls_fsm_cs) != `LSU.IDLE || $past(`LSU.lsu_req_i)) |-> $stable(spec_mem_write))
  SpecStableStoreSnd: have (ex_is_store_instr && `LSU.ls_fsm_cs != `LSU.IDLE && ($past(`LSU.ls_fsm_cs) != `LSU.IDLE || $past(`LSU.lsu_req_i)) |-> $stable(spec_mem_write_snd))
  SpecStableStoreAddr: have (ex_is_store_instr && `LSU.ls_fsm_cs != `LSU.IDLE && ($past(`LSU.ls_fsm_cs) != `LSU.IDLE || $past(`LSU.lsu_req_i)) |-> $stable(spec_mem_write_fst_addr))
  SpecStableStoreSndAddr: have (ex_is_store_instr && `LSU.ls_fsm_cs != `LSU.IDLE && ($past(`LSU.ls_fsm_cs) != `LSU.IDLE || $past(`LSU.lsu_req_i)) |-> $stable(spec_mem_write_snd_addr))
  SpecStableStoreData: have (ex_is_store_instr && `LSU.ls_fsm_cs != `LSU.IDLE && ($past(`LSU.ls_fsm_cs) != `LSU.IDLE || $past(`LSU.lsu_req_i)) |-> $stable(spec_mem_write_fst_wdata))
  SpecStableStoreSndData: have (ex_is_store_instr && `LSU.ls_fsm_cs != `LSU.IDLE && ($past(`LSU.ls_fsm_cs) != `LSU.IDLE || $past(`LSU.lsu_req_i)) |-> $stable(spec_mem_write_snd_wdata))

  LoadNotSpecWrite: have (ex_is_load_instr |-> ~spec_mem_write)
  StoreNotSpecRead: have (ex_is_store_instr |-> ~spec_mem_read)

  FirstCycleNoGnt: have (`ID.instr_first_cycle |-> ~mem_gnt_fst_q)
  MemStartFirstCycle: have (`LSU.ls_fsm_cs == `LSU.IDLE && `CR.lsu_req |-> `ID.instr_first_cycle)
  DivInstrStable: have (`MULT.md_state_q != `MULT.MD_IDLE |-> $stable(`CR.instr_rdata_id) && `CR.instr_valid_id && (~`ID.stall_multdiv -> `MULT.md_state_q == `MULT.MD_FINISH) && `MULTG.mult_state_q == `MULTG.ALBL && `MULT.div_en_internal && (~wbexc_exists | wbexc_finishing))

  InstrReqCount: have (
    (instr_mem_assume.outstanding_reqs_q == 2) == (`IFP.rdata_outstanding_q[1] && `IFP.rdata_outstanding_q[0]) &&
    (instr_mem_assume.outstanding_reqs_q == 1) == (~`IFP.rdata_outstanding_q[1] && `IFP.rdata_outstanding_q[0]) &&
    (instr_mem_assume.outstanding_reqs_q == 0) == (~`IFP.rdata_outstanding_q[1] && ~`IFP.rdata_outstanding_q[0])
  )
  
  FetchErrRoot: have (`ID.instr_valid_i && (`IDC.ctrl_fsm_cs == `IDC.FLUSH -> ~$past(`IDC.csr_pipe_flush)) |-> spec_fetch_err == `ID.instr_fetch_err_i)
  /

  MepcEn: have (`CSR.mepc_en |-> instr_will_progress | wbexc_finishing | wbexc_handling_irq)
  DivNoKill: have (`MULT.md_state_q != `MULT.MD_IDLE |-> ~ex_kill)

  RTypeFirstCycle: have (`CR.instr_valid_id & ex_is_rtype |-> `ID.instr_first_cycle_id_o)

  DataMemGntMaxDelay: have (data_req_o |-> ##[0:`TIME_LIMIT] data_gnt_i)
  DataMemRvalidMaxDelay: have (data_gnt_i |=> ##[0:`TIME_LIMIT] data_rvalid_i)
  InstrMemGntMaxDelay: have (instr_req_o |-> ##[0:`TIME_LIMIT] instr_gnt_i)
  InstrMemRvalidMaxDelay: have (instr_gnt_i |=> ##[0:`TIME_LIMIT] instr_rvalid_i)

  NormalMainResMatch: have (`ID.instr_valid_i && ~ex_kill && main_mode == MAIN_IDEX |-> spec_api_i.main_result == MAINRES_OK)
  FetchErrMainResMatch: have (`ID.instr_valid_i && ~ex_kill && main_mode == MAIN_IFERR |-> spec_api_i.main_result == MAINRES_OK)
  IRQMainResMatch: have (wbexc_handling_irq && main_mode == MAIN_IRQ |-> spec_api_i.main_result == MAINRES_OK)

  NoStallBranch: have (`ID.instr_valid_i & `ID.stall_id & ~`ID.branch_set_raw & ~`ID.jump_set_raw & ~`IDC.cheri_branch_req_i |-> ~ex_has_branched_d)
  FirstCycleHold: have (`ID.instr_valid_i & ~`ID.instr_executing |-> `ID.id_fsm_q == `ID.FIRST_CYCLE)

  ReqNotOutstanding: have (`LSU.ls_fsm_cs == `LSU.IDLE && `CR.lsu_req |-> ~`LSU.resp_wait)
  /
  SpecEnUnreach: have (spec_en |-> ~spec_int_err)

lemma live
  DivMiddleStep: have (`MULT.md_state_q == `MULT.MD_COMP && $stable(`MULT.md_state_q) |-> `MULT.div_counter_q == $past(`MULT.div_counter_q) - 1)
  IF: have (always (##[0:10] `IF.if_instr_valid))
  PCSet: have (`CR.pc_set |-> ##[0:10] ~`CR.pc_set)
  /

  DivStart: have (`CR.instr_new_id & `CR.instr_valid_id & ex_is_div |-> ##[0:7] (`MULT.div_counter_q == 5'd31 && `MULT.md_state_q == `MULT.MD_COMP) | instr_will_progress | (ex_kill & `CR.instr_valid_id))
  DivMiddle: have (`MULT.div_counter_q == 5'd31 && `MULT.md_state_q == `MULT.MD_COMP |-> ##30 `MULT.div_counter_q == 5'd1 && `MULT.md_state_q == `MULT.MD_COMP)
  DivEnd: have (`MULT.div_counter_q == 5'd1 && `MULT.md_state_q == `MULT.MD_COMP |-> ##3 instr_will_progress)

  WFIStart: have (instr_will_progress & ex_is_wfi & ~ex_err |-> ##[0:5] `IDC.ctrl_fsm_cs == `IDC.SLEEP)
  WFIMiddle: have (`IDC.ctrl_fsm_cs == `IDC.SLEEP |-> ##[0:20] `IDC.ctrl_fsm_cs == `IDC.SLEEP && `IDC.ctrl_fsm_ns == `IDC.FIRST_FETCH)
  WFIEnd: have (`IDC.ctrl_fsm_cs == `IDC.SLEEP && `IDC.ctrl_fsm_ns == `IDC.FIRST_FETCH |-> ##[0:5] `IF.id_in_ready_i)

  NewProgNormal: have (`CR.instr_new_id & `CR.instr_valid_id & ~ex_is_div & ~ex_is_mem_instr |-> ##[0:5] (instr_will_progress | (ex_kill & `CR.instr_valid_id)))
  NewProgMem: have (`CR.instr_new_id & `CR.instr_valid_id & ex_is_mem_instr |-> ##[0:10] (instr_will_progress | (ex_kill & `CR.instr_valid_id)))

  ProgReadyNormal: have (instr_will_progress & (~ex_is_wfi | ex_err) |-> ##[0:5] `IF.id_in_ready_i)
  ProgReadyWFI: have (instr_will_progress & ex_is_wfi & ~ex_err |-> ##[0:30] `IF.id_in_ready_i)
  KillReady: have (ex_kill & `CR.instr_valid_id |-> ##[1:35] `IF.id_in_ready_i && ~wbexc_exists && ~`CR.instr_valid_id)

  ReadyNew: have (`IF.id_in_ready_i |-> ##[1:11] `CR.instr_new_id & `CR.instr_valid_id)
  Initial: have ($rose(rst_ni) |-> ##[1:15] `CR.instr_new_id & `CR.instr_valid_id)
  FlushedNoKill: have (`CR.instr_new_id & `CR.instr_valid_id & ~wbexc_exists |-> ~ex_kill until_with instr_will_progress)
  /
  ReadyFlushed: have (`IF.id_in_ready_i && ~wbexc_exists && ~`CR.instr_valid_id |-> ##[1:11] `CR.instr_new_id & `CR.instr_valid_id & ~wbexc_exists)
  /
  DivNew1: have (`CR.instr_new_id & `CR.instr_valid_id & ex_is_div |-> ##[0:37] ((`MULT.div_counter_q == 5'd1 && `MULT.md_state_q == `MULT.MD_COMP) | instr_will_progress | (ex_kill & `CR.instr_valid_id)))
  /
  NewProgDiv: have (`CR.instr_new_id & `CR.instr_valid_id & ex_is_div |-> ##[0:40] (instr_will_progress | (ex_kill & `CR.instr_valid_id)))
  ProgReady: have (instr_will_progress |-> ##[0:30] `IF.id_in_ready_i)
  /
  NewProg: have (`CR.instr_new_id & `CR.instr_valid_id |-> ##[0:40] (instr_will_progress | (ex_kill & `CR.instr_valid_id)))
  /
  FlushedProg: have (`CR.instr_new_id & `CR.instr_valid_id & ~wbexc_exists |-> ##[0:40] instr_will_progress)
  /
  KillSpecEn: have (ex_kill & `CR.instr_valid_id |-> ##[0:86] spec_en)
  /
  NewReady: have (`CR.instr_new_id & `CR.instr_valid_id |-> ##[0:75] `IF.id_in_ready_i)
  NewSpecEn: have (`CR.instr_new_id & `CR.instr_valid_id |-> ##[0:40+86] spec_en)
  /
  NewLoop: have (`CR.instr_new_id & `CR.instr_valid_id |-> ##[1:86] `CR.instr_new_id & `CR.instr_valid_id)
  /
  New: have (always (##[1:86] `CR.instr_new_id & `CR.instr_valid_id))
